#!/usr/bin/bash

set -o pipefail

pre_config_env=$(mktemp)
post_config_env=$(mktemp)
in_makefile=Makefile.in
in_secrets=../.secrets.gpg
out_secrets=.secrets
out_envfile=.env.conf
out_macrosfile=macros.m4
out_makefile=Makefile

printenv > $pre_config_env

# OPTIONS
WITH_CLICKUP_TARGET=IE
WITH_DEPLOY_TARGET=IE_CLOUD
WITH_GCLOUD_TARGET=PN
BUILDIR_STEM=build
SKIP_NPM_INSTALL=false
export CLICKPIE_SERVER_URL_PUBLIC=
export CLICKPIE_SERVER_URL_LOCAL=
export LOGLEVEL=debug
export PREFIX=
export EXEC_PREFIX=
export BINDIR=
export SBINDIR=
export LIBEXECDIR=
export DATAROOTDIR=
export DATADIR=
export SYSCONFDIR=
export SHAREDSTATEDIR=
export LOCALSTATEDIR=
export RUNSTATEDIR=
export INCLUDEDIR=
export DOCDIR=
export LIBDIR=
export LOCALEDIR=

# EXPORT until set +o allexport
# --------------------------------------------------------------------------------
set -o allexport


# App description
APP_NAME=clickpie-software
APP_VERSION=0.0.1
APP_VVERSION=v${APP_VERSION}
APP_DISTNAME=${APP_NAME}-${APP_VVERSION}
API_VERSION=1
API_VVERSION=v${API_VERSION}

# App directories
PKGDIR=.
PKGDIR_ABS=$(pwd)
SRCDIR=${PKGDIR}/src
SRCDIR_ABS=${PKGDIR_ABS}/src
BUILDIR=${PKGDIR}/build
BUILDIR_ABS=${PKGDIR_ABS}/build
CACHEDIR=${PREFIX}/var
TEMPDIR=${PREFIX}/var
CONFDIR=${PREFIX}/config

# Miscellaneous
MODE=development
NODE_ENV=

# Tools
ESBUILD=${PKGDIR_ABS}/node_modules/.bin/esbuild
DOTENV=${HOME}/bin/dotenv
NODE=${HOME}/.nvm/versions/node/v21.0.0/bin/node

# Clickup credentials
CLICKUP_LOGIN_USERNAME=
CLICKUP_LOGIN_PASS=
CLICKUP_LOGIN_AUTH_TOKEN=

# Clickup API url
CLICKUP_API_URL='https://api.clickup.com/api/v2'

# clickpie-server, servicing both UI clients and API clients
# public url
CLICKPIE_SERVER_URL_PUBLIC_SCHEME=
CLICKPIE_SERVER_URL_PUBLIC_PORT=
CLICKPIE_SERVER_URL_PUBLIC_HOSTNAME=
# local url
CLICKPIE_SERVER_URL_LOCAL_SCHEME=
CLICKPIE_SERVER_URL_LOCAL_PORT=
CLICKPIE_SERVER_URL_LOCAL_HOSTNAME=
# clickpie-api, serviced by clickpie-server
# public url
CLICKPIE_API_URL_PUBLIC_SCHEME=
CLICKPIE_API_URL_PUBLIC_PORT=
CLICKPIE_API_URL_PUBLIC_HOSTNAME=
CLICKPIE_API_URL_PUBLIC=
# local url
CLICKPIE_API_URL_LOCAL_SCHEME=
CLICKPIE_API_URL_LOCAL_PORT=
CLICKPIE_API_URL_LOCAL_HOSTNAME=
CLICKPIE_API_URL_LOCAL=

set +o allexport

main() {
  parse_args "$@"
  set -- "${POSARGS[@]}"
  debug "Config: $(quote $CONFIG)"
  debug "Clickup login: $(quote $CLICKUP_LOGIN)"

  NODE_ENV="$MODE"
  printf "Configuring...\n"
  printf "Resolving --mode...|%s\n" "$MODE"

  define_pkgdirs

  printf "Checking dependency...|node-v21.0.0...|"
  __node_path="$(command -v node)"
  [[ -z "$__node_path" ]] && {
    echo MISSING
    exit 1
  }
  __node_version="$(node --version)"
  [[ "$__node_version" != "v21.0.0" ]] && {
    echo MISSING
    exit 1
  }
  echo "$__node_path"

  printf "Checking dependency...|make...|"
  if ! command -v make; then
    echo MISSING
    exit 1
  fi

  printf "Checking dependency...|jq...|"
  if ! command -v jq; then
    echo MISSING
    exit 1
  fi

  printf "Checking dependency...|inotifywait...|"
  if ! command -v inotifywait; then
    echo MISSING
    exit 1
  fi

  printf "Checking dependency...|dotenv...|"
  if ! command -v dotenv; then
    echo MISSING
    exit 1
  fi

  printf "Installing packages..."
  log_npm_install=$(mktemp)
  if flag SKIP_NPM_INSTALL; then
    echo SKIP
  else
    npm install &> $log_npm_install
    printf "INSTALLED\n"
    cat $log_npm_install
    rm -f $log_npm_install
  fi

  printf "Decrypting secrets...|%s\n" "$out_secrets"
  if ! ( [ -f "$out_secrets" ] || gpg --decrypt --quiet "$in_secrets" > "$out_secrets" ); then
    error "Failed to decrypt $in_secrets"
  fi
  source "$out_secrets"

  printf "Resolving --with-clickup-target...|%s\n" "$WITH_CLICKUP_TARGET"
  CLICKUP_LOGIN_TARGET=CLICKUP_LOGIN_${WITH_CLICKUP_TARGET}
  CLICKUP_LOGIN_USERNAME="$(expand "${CLICKUP_LOGIN_TARGET}_USERNAME")"
  CLICKUP_LOGIN_PASS="$(expand "${CLICKUP_LOGIN_TARGET}_PASS")"
  CLICKUP_LOGIN_AUTH_TOKEN="$(expand "${CLICKUP_LOGIN_TARGET}_TOKEN")"

  # clickpie-server, servicing both UI clients and API clients
  # public url
  printf "Resolving --server-public-url...|%s\n" "$CLICKPIE_SERVER_URL_PUBLIC"
  read -r scheme hostname port < <(parseUrl "$CLICKPIE_SERVER_URL_PUBLIC")
  if [[ "$scheme" == '' || "$hostname" == '' || "$port" == '' ]]; then
    error 'clickpie-server public url missing either scheme, hostname or port'
  fi
  CLICKPIE_SERVER_URL_PUBLIC_SCHEME="$scheme"
  CLICKPIE_SERVER_URL_PUBLIC_PORT="$port"
  CLICKPIE_SERVER_URL_PUBLIC_HOSTNAME="$hostname"
  CLICKPIE_SERVER_URL_PUBLIC_URL="${scheme}"://"${hostname}":"${port}"
  # local url
  printf "Resolving --server-local-url...|%s\n" "$CLICKPIE_SERVER_URL_LOCAL"
  read -r scheme hostname port < <(parseUrl "$CLICKPIE_SERVER_URL_LOCAL")
  if [[ "$scheme" == '' || "$hostname" == '' || "$port" == '' ]]; then
    error 'clickpie-server local url missing either scheme, hostname or port'
  fi
  CLICKPIE_SERVER_URL_LOCAL_SCHEME="$scheme"
  CLICKPIE_SERVER_URL_LOCAL_PORT="$port"
  CLICKPIE_SERVER_URL_LOCAL_HOSTNAME="$hostname"
  CLICKPIE_SERVER_URL_LOCAL="${scheme}"://"${hostname}":"${port}"

  # clickpie-api, serviced by clickpie-server
  # public url
  CLICKPIE_API_URL_PUBLIC_SCHEME="${CLICKPIE_SERVER_URL_PUBLIC_SCHEME}"
  CLICKPIE_API_URL_PUBLIC_PORT="${CLICKPIE_SERVER_URL_PUBLIC_PORT}"
  CLICKPIE_API_URL_PUBLIC_HOSTNAME="${CLICKPIE_SERVER_URL_PUBLIC_HOSTNAME}"
  CLICKPIE_API_URL_PUBLIC="${CLICKPIE_API_URL_PUBLIC_SCHEME}"://"${CLICKPIE_API_URL_PUBLIC_HOSTNAME}":"${CLICKPIE_API_URL_PUBLIC_PORT}"/api/"${API_VVERSION}"
  # local url
  CLICKPIE_API_URL_LOCAL_SCHEME="${CLICKPIE_SERVER_URL_LOCAL_SCHEME}"
  CLICKPIE_API_URL_LOCAL_PORT="${CLICKPIE_SERVER_URL_LOCAL_PORT}"
  CLICKPIE_API_URL_LOCAL_HOSTNAME="${CLICKPIE_SERVER_URL_LOCAL_HOSTNAME}"
  CLICKPIE_API_URL_LOCAL="${CLICKPIE_API_URL_LOCAL_SCHEME}"://"${CLICKPIE_API_URL_LOCAL_HOSTNAME}":"${CLICKPIE_API_URL_LOCAL_PORT}"/api/"${API_VVERSION}"

  define_installdirs
  define_derivedir
  define_env
  makefile
  configure_clickpie_server
  cleanup
}

define_pkgdirs() {
  printf "Resolving package directories...\n"
  declare -gx CONFIGUREDIR_ABS="$(pwd)"
  echo "CONFIGUREDIR_ABS...|$CONFIGUREDIR_ABS"
  declare -gx CONFIGUREDIR="$(realpath -e --relative-to="$PKGDIR_ABS" "$CONFIGUREDIR_ABS")"
  echo "CONFIGUREDIR...|$CONFIGUREDIR"
  declare -gx PKGDIR_ABS="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" 2>/dev/null && pwd)"
  echo "PKGDIR_ABS...|$PKGDIR_ABS"
  declare -gx PKGDIR="$(realpath --relative-to="$CONFIGUREDIR_ABS" "$PKGDIR_ABS")"
  echo "PKGDIR...|$PKGDIR"
  echo "BUILDIR_STEM...|$BUILDIR_STEM"
  declare -gx BUILDIR_ABS="${CONFIGUREDIR_ABS}/$BUILDIR_STEM"
  echo "BUILDIR_ABS...|$BUILDIR_ABS"
  declare -gx BUILDIR="$(realpath -m --relative-to="$CONFIGUREDIR_ABS" "$BUILDIR_ABS")"
  echo "BUILDIR...|$BUILDIR"
}

define_installdirs() {
  printf "Resolving installation directories...\n"
  isempty PREFIX && PREFIX="$(pwd)"
  echo "PREFIX...|$(realpath -m --relative-to=. $PREFIX)"
  isempty EXEC_PREFIX && EXEC_PREFIX="$PREFIX"
  echo "EXEC_PREFIX...|$(realpath -m --relative-to=. $EXEC_PREFIX)"
  isempty BINDIR && BINDIR="${EXEC_PREFIX}/bin"
  echo "BINDIR...|$(realpath -m --relative-to=. $BINDIR)"
  isempty SBINDIR && SBINDIR="${EXEC_PREFIX}/sbin"
  echo "SBINDIR...|$(realpath -m --relative-to=. $SBINDIR)"
  isempty LIBEXECDIR && LIBEXECDIR="${EXEC_PREFIX}/libexec"
  echo "LIBEXECDIR...|$(realpath -m --relative-to=. $LIBEXECDIR)"
  isempty DATAROOTDIR && DATAROOTDIR="${PREFIX}/share"
  echo "DATAROOTDIR...|$(realpath -m --relative-to=. $DATAROOTDIR)"
  isempty DATADIR && DATADIR="${DATAROOTDIR}/${APP_NAME}"
  echo "DATADIR...|$(realpath -m --relative-to=. $DATADIR)"
  isempty SYSCONFDIR && SYSCONFDIR="${PREFIX}/etc"
  echo "SYSCONFDIR...|$(realpath -m --relative-to=. $SYSCONFDIR)"
  isempty SHAREDSTATEDIR && SHAREDSTATEDIR="${PREFIX}/com"
  echo "SHAREDSTATEDIR...|$(realpath -m --relative-to=. $SHAREDSTATEDIR)"

  # GNU standard
  isempty LOCALSTATEDIR && LOCALSTATEDIR="${PREFIX}/var"
  # De facto
  LOCALSTATEDIR=/var/lib/${APP_NAME}
  echo "LOCALSTATEDIR...|$(realpath -m --relative-to=. $LOCALSTATEDIR)"

  # GNU standard
  isempty RUNSTATEDIR && RUNSTATEDIR="${LOCALSTATEDIR}/run"
  # De facto
  RUNSTATEDIR=/run
  echo "RUNSTATEDIR...|$(realpath -m --relative-to=. $RUNSTATEDIR)"

  isempty INCLUDEDIR && INCLUDEDIR="${PREFIX}/include"
  echo "INCLUDEDIR...|$(realpath -m --relative-to=. $INCLUDEDIR)"
  isempty DOCDIR && DOCDIR="${DATAROOTDIR}/doc/${APP_NAME}"
  echo "DOCDIR...|$(realpath -m --relative-to=. $DOCDIR)"
  isempty LIBDIR && LIBDIR="${LIBEXECDIR}/lib"
  echo "LIBDIR...|$(realpath -m --relative-to=. $LIBDIR)"
}

define_derivedirs() {
  # https://wiki.debian.org/Multiarch/Tuples
  # https://man.archlinux.org/man/file-hierarchy.7
  # https://wiki.debian.org/Multiarch/Tuples
  # https://man.archlinux.org/man/systemd-path.1.en
  declare -gx LOGDIR
  declare -gx CACHEDIR
  declare -gx SPOOLDIR
  declare -gx SKELCONFDIR=/usr/share/factory/etc
  echo 0
}

expand() {
  echo ${!1}
}

makefile() {
  printf "Generating Makefile...|%s\n" "$out_makefile"
  m4 $out_macrosfile $in_makefile > $out_makefile
}

flag() {
  local f="${!1:-}"
  if [ "$f" == '' ]; then
    error "Undefined flag: $1"
  elif [ "$f" == true ]; then
    return 0
  else
    return 1
  fi
}

isempty() {
  local v="${!1:-}"
  if [ "$v" == "" ]; then
    return 0
  else
    return 1
  fi
}

configure_clickpie_server() {
  printf "Configuring clickpie-server...\n"
  cd clickpie-server || exit 1
  PKGDIR=.
  PKGDIR_ABS=$(pwd)
  SRCDIR=${PKGDIR}/src
  SRCDIR_ABS=${PKGDIR_ABS}/src
  BUILDIR=${PKGDIR}/build
  BUILDIR_ABS=${PKGDIR_ABS}/build
  CACHEDIR=${PREFIX}/var
  TEMPDIR=${PREFIX}/var
  CONFDIR=${PREFIX}/config
  define_env
  makefile
}

cleanup() {
  rm $pre_config_env
  rm $post_config_env
}

useparseurl() {
  read -r scheme hostname port < <(parseUrl "http://localhost:5173")
  echo $scheme $hostname $port
}

parseUrl() {
  url=$1
  scheme="$(echo "$url" | grep -Eo "^.*://" -)"
  scheme="${scheme%%:*}"
  hostname="$(echo "$url" | grep -Eo "(://[a-zA-Z0-9._-]+(:[0-9]+|/|$)|@[a-zA-Z0-9._-]+(:|/|$))")"
  hostname="${hostname##*/}"
  hostname="${hostname#*@}"
  hostname="${hostname%:*}"
  port="$(echo "$url" | grep -Eo ":[0-9]+(/|$)")"
  port="${port#*:}"
  echo "$scheme" "$hostname" "$port"
}

define_env() {
  printf "Defining environment...|%s\n" "$out_envfile"
  printenv > $post_config_env
  rm -f $out_envfile
  local unquoted_envars=$(mktemp)
  diff --normal $pre_config_env $post_config_env | grep '^>' | cut -c3- | sort > $unquoted_envars
  while IFS='=' read -r k v; do
    # Quote values
    if [[ "$v" =~ \' ]]; then
      printf "%s=\"%s\"\n" "$k" "$v" >> $out_envfile
    else
      printf "%s='%s'\n" "$k" "$v" >> $out_envfile
    fi
  done < $unquoted_envars

  rm -f $out_macrosfile
  while IFS='=' read -r key value; do
    cat <<EOF >> $out_macrosfile
define(\`IN_$key', \`$value')dnl
EOF
  done < $unquoted_envars
}

parse_args(){
  declare -ga POSARGS=()
  while (($# > 0)); do
    case "${1:-}" in
      -r* | -r=* | --run=* | --run*)
        command=$(parse_param "$@") || shift $?
        $command "${@:2}"
        exit 0
        ;;
      --mode=* | --mode* | -m)
        MODE="$(parse_param "$@")" || shift $?
        ;;
      --buildir-stem=* | --buildir-stem)
        BUILDIR_STEM="$(parse_param "$@")" || shift $?
        ;;
      --skip-npm-install)
        SKIP_NPM_INSTALL=true
        ;;
      --server-public-url=* | --server-public-url*)
        CLICKPIE_SERVER_URL_PUBLIC="$(parse_param "$@")" || shift $?
        ;;
      --server-local-url=* | --server-local-url*)
        CLICKPIE_SERVER_URL_LOCAL="$(parse_param "$@")" || shift $?
        ;;
      --with-clickup-target=* | --with-clickup-target*)
        WITH_CLICKUP_TARGET="$(parse_param "$@")" || shift $?
        ;;
      --with-deploy-target=* | --with-deploy-target*)
        WITH_DEPLOY_TARGET="$(parse_param "$@")" || shift $?
        ;;
      --with-gcloud-target=* | --with-gcloud-target*)
        WITH_GCLOUD_TARGET="$(parse_param "$@")" || shift $?
        ;;
      --prefix=* | --prefix*)
        PREFIX="$(parse_param "$@")" || shift $?
        ;;
      --loglevel=* | --loglevel*)
        LOGLEVEL="$(parse_param "$@")" || shift $?
        ;;
      -C | --config=* | --config*)
        CONFIG="$(parse_param "$@")" || shift $?
        ;;
      -d | --debug)
        DEBUG=0
        ;;
      -h | --help)
        usage
        exit 0
        ;;
      -[a-zA-Z][a-zA-Z]*)
        local i="${1:-}"
        shift
        local rest="$@"
        set --
        for i in $(echo "$i" | grep -o '[a-zA-Z]'); do
          set -- "$@" "-$i"
        done
        set -- $@ $rest
        continue
        ;;
      --)
        shift
        POSARGS+=("$@")
        ;;
      -[a-zA-Z]* | --[a-zA-Z]*)
        error "Unrecognized argument ${1:-}"
        ;;
      *)
        POSARGS+=("${1:-}")
        ;;
    esac
    shift
  done
}

parse_param() {
  local param arg
  local -i toshift=0

  if (($# == 0)); then
    return $toshift
    # param = value
  elif [[ "$1" =~ .*=.* ]]; then
    param="${1%%=*}"
    arg="${1#*=}"
    # param value
  elif [[ "${2-}" =~ ^[^-].+ ]]; then
    param="$1"
    arg="$2"
    ((toshift++))
  fi

  if [[ -z "${arg-}" && ! "${OPTIONAL-}" ]]; then
    fatal "${param:-$1} requires an argument"
  fi

  echo "${arg:-}"
  return $toshift
}

quote() {
  echo \'"$@"\'
}

error() {
  echo "$@"
  exit 1
}

debug() {
  [ ! $DEBUG ] && return
  echo debug: "$@" >&2
}

debug_script_params() {
  debug "Output format: $(quote $_OUTPUT_FORMAT)"
  debug "Verbosity: $(quote $_VERBOSE)"
  debug "Clickup Authorization token: $(quote $_USER_AUTH_TOKEN)"
  debug "Clickup API prefix: $(quote $_CLICKUP_API_PREFIX)"
  debug "Script json2csv: $(quote $_JSON2CSV)"
  debug "Script commons: $(quote $_SCRIPT_COMMONS)"
  debug "Workspace: $(quote $_WORKSPACE_ID)"
  debug "Space: $(quote $_SPACE_ID)"
  debug "Folder: $(quote $_FOLDER_ID)"
  debug "List: $(quote $_LIST_ID)"
}

main "$@"

## Local Variables:
## mode: script-mode
## End:
