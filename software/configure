#!/usr/bin/bash

set -o pipefail

printf "Resolving package directories...\n"

declare -gx CONFIGUREDIR_ABS="$(pwd)"
echo "CONFIGUREDIR_ABS...|$CONFIGUREDIR_ABS"

declare -gx SRCDIR_ABS="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" 2>/dev/null && pwd)"
echo "SRCDIR_ABS...|$SRCDIR_ABS"

declare -gx CONFIGUREDIR="$(realpath -e --relative-to="$SRCDIR_ABS" "$CONFIGUREDIR_ABS")"
echo "CONFIGUREDIR...|$CONFIGUREDIR"

declare -gx SRCDIR="$(realpath -e --relative-to="$CONFIGUREDIR_ABS" "$SRCDIR_ABS")"
echo "SRCDIR...|$SRCDIR"

echo "BUILDIR_STEM...|$BUILDIR_STEM"
declare -gx BUILDIR_ABS="${CONFIGUREDIR_ABS}/$BUILDIR_STEM"
echo "BUILDIR_ABS...|$BUILDIR_ABS"

declare -gx BUILDIR="$(realpath -m --relative-to="$SRCDIR_ABS" "$BUILDIR_ABS")"
echo "BUILDIR...|$BUILDIR"

exit 0


pre_config_env=$(mktemp)
post_config_env=$(mktemp)
in_makefile=Makefile.in
in_secrets=../.secrets.gpg
out_secrets=.secrets
out_envfile=.env.conf
out_macrosfile=macros.m4
out_makefile=Makefile


printenv > $pre_config_env

# OPTIONS
MODE=production
WITH_CLICKUP_TARGET=IE
WITH_DEPLOY_TARGET=IE_CLOUD
WITH_GCLOUD_TARGET=PN
WITH_INSTALLDIRS_PRESET=gnu_prefix
BUILDIR_STEM=build
SKIP_NPM_INSTALL=false
export CLICKPIE_SERVER_URL_PUBLIC=
export CLICKPIE_SERVER_URL_LOCAL=
export LOGLEVEL=debug

# Installation directories
export PREFIX=
export EXEC_PREFIX=
export BINDIR=
export SBINDIR=
export LIBEXECDIR=
export DATAROOTDIR=
export DATADIR=
export SYSCONFDIR=
export SHAREDSTATEDIR=
export LOCALSTATEDIR=
export RUNSTATEDIR=
export INCLUDEDIR=
export DOCDIR=
export LIBDIR=
export LOCALEDIR=

# EXPORT until set +o allexport
# --------------------------------------------------------------------------------
set -o allexport

# System Analysis
BUILD_ARCH_SPECIFIER=$(basename $(systemd-path system-library-arch))
HOST_ARCH_SPECIFIER=$BUILD_ARCH_SPECIFIER
TARGET_ARCH_SPECIFIER=$HOST_ARCH_SPECIFIER

# App description
PKG_NAME=clickpie-software
PKG_VERSION=0.0.1
PKG_VVERSION=v${PKG_VERSION}
PKG_DISTNAME=${PKG_NAME}-${PKG_VVERSION}
API_VERSION=1
API_VVERSION=v${API_VERSION}

# Miscellaneous
NODE_ENV=

# Tools
ESBUILD=${SRCDIR_ABS}/node_modules/.bin/esbuild
DOTENV=${HOME}/bin/dotenv
NODE=${HOME}/.nvm/versions/node/v21.0.0/bin/node

# Clickup credentials
CLICKUP_LOGIN_USERNAME=
CLICKUP_LOGIN_PASS=
CLICKUP_LOGIN_AUTH_TOKEN=

# Clickup API url
CLICKUP_API_URL='https://api.clickup.com/api/v2'

# clickpie-server, servicing both UI clients and API clients
# public url
CLICKPIE_SERVER_URL_PUBLIC_SCHEME=
CLICKPIE_SERVER_URL_PUBLIC_PORT=
CLICKPIE_SERVER_URL_PUBLIC_HOSTNAME=
# local url
CLICKPIE_SERVER_URL_LOCAL_SCHEME=
CLICKPIE_SERVER_URL_LOCAL_PORT=
CLICKPIE_SERVER_URL_LOCAL_HOSTNAME=
# clickpie-api, serviced by clickpie-server
# public url
CLICKPIE_API_URL_PUBLIC_SCHEME=
CLICKPIE_API_URL_PUBLIC_PORT=
CLICKPIE_API_URL_PUBLIC_HOSTNAME=
CLICKPIE_API_URL_PUBLIC=
# local url
CLICKPIE_API_URL_LOCAL_SCHEME=
CLICKPIE_API_URL_LOCAL_PORT=
CLICKPIE_API_URL_LOCAL_HOSTNAME=
CLICKPIE_API_URL_LOCAL=

set +o allexport

main() {
  parse_args "$@"
  set -- "${POSARGS[@]}"

  NODE_ENV="$MODE"
  printf "Configuring...\n"
  resolve_pkgdirs
  resolve_system
  printf "Resolving --mode...|%s\n" "$MODE"

  printf "Checking dependency...|node-v21.0.0...|"
  __node_path="$(command -v node)"
  [[ -z "$__node_path" ]] && {
    echo MISSING
    exit 1
  }
  __node_version="$(node --version)"
  [[ "$__node_version" != "v21.0.0" ]] && {
    echo MISSING
    exit 1
  }
  echo "$__node_path"

  printf "Checking dependency...|make...|"
  if ! command -v make; then
    echo MISSING
    exit 1
  fi

  printf "Checking dependency...|jq...|"
  if ! command -v jq; then
    echo MISSING
    exit 1
  fi

  printf "Checking dependency...|inotifywait...|"
  if ! command -v inotifywait; then
    echo MISSING
    exit 1
  fi

  printf "Checking dependency...|dotenv...|"
  if ! command -v dotenv; then
    echo MISSING
    exit 1
  fi

  printf "Installing packages..."
  log_npm_install=$(mktemp)
  if flag SKIP_NPM_INSTALL; then
    echo SKIP
  else
    npm install &> $log_npm_install
    printf "INSTALLED\n"
    cat $log_npm_install
    rm -f $log_npm_install
  fi


  printf "Decrypting secrets...|%s\n" "$out_secrets"
  if ! ( [ -f "$out_secrets" ] || gpg --decrypt --quiet "$in_secrets" > "$out_secrets" ); then
    error "Failed to decrypt $in_secrets"
  fi
  source "$out_secrets"

  printf "Resolving --with-clickup-target...|%s\n" "$WITH_CLICKUP_TARGET"
  CLICKUP_LOGIN_TARGET=CLICKUP_LOGIN_${WITH_CLICKUP_TARGET}
  CLICKUP_LOGIN_USERNAME="$(expand "${CLICKUP_LOGIN_TARGET}_USERNAME")"
  CLICKUP_LOGIN_PASS="$(expand "${CLICKUP_LOGIN_TARGET}_PASS")"
  CLICKUP_LOGIN_AUTH_TOKEN="$(expand "${CLICKUP_LOGIN_TARGET}_TOKEN")"

  # clickpie-server, servicing both UI clients and API clients
  # public url
  printf "Resolving --server-public-url...|%s\n" "$CLICKPIE_SERVER_URL_PUBLIC"
  read -r scheme hostname port < <(parseUrl "$CLICKPIE_SERVER_URL_PUBLIC")
  if [[ "$scheme" == '' || "$hostname" == '' || "$port" == '' ]]; then
    error 'clickpie-server public url missing either scheme, hostname or port'
  fi
  CLICKPIE_SERVER_URL_PUBLIC_SCHEME="$scheme"
  CLICKPIE_SERVER_URL_PUBLIC_PORT="$port"
  CLICKPIE_SERVER_URL_PUBLIC_HOSTNAME="$hostname"
  CLICKPIE_SERVER_URL_PUBLIC_URL="${scheme}"://"${hostname}":"${port}"
  # local url
  printf "Resolving --server-local-url...|%s\n" "$CLICKPIE_SERVER_URL_LOCAL"
  read -r scheme hostname port < <(parseUrl "$CLICKPIE_SERVER_URL_LOCAL")
  if [[ "$scheme" == '' || "$hostname" == '' || "$port" == '' ]]; then
    error 'clickpie-server local url missing either scheme, hostname or port'
  fi
  CLICKPIE_SERVER_URL_LOCAL_SCHEME="$scheme"
  CLICKPIE_SERVER_URL_LOCAL_PORT="$port"
  CLICKPIE_SERVER_URL_LOCAL_HOSTNAME="$hostname"
  CLICKPIE_SERVER_URL_LOCAL="${scheme}"://"${hostname}":"${port}"

  # clickpie-api, serviced by clickpie-server
  # public url
  CLICKPIE_API_URL_PUBLIC_SCHEME="${CLICKPIE_SERVER_URL_PUBLIC_SCHEME}"
  CLICKPIE_API_URL_PUBLIC_PORT="${CLICKPIE_SERVER_URL_PUBLIC_PORT}"
  CLICKPIE_API_URL_PUBLIC_HOSTNAME="${CLICKPIE_SERVER_URL_PUBLIC_HOSTNAME}"
  CLICKPIE_API_URL_PUBLIC="${CLICKPIE_API_URL_PUBLIC_SCHEME}"://"${CLICKPIE_API_URL_PUBLIC_HOSTNAME}":"${CLICKPIE_API_URL_PUBLIC_PORT}"/api/"${API_VVERSION}"
  # local url
  CLICKPIE_API_URL_LOCAL_SCHEME="${CLICKPIE_SERVER_URL_LOCAL_SCHEME}"
  CLICKPIE_API_URL_LOCAL_PORT="${CLICKPIE_SERVER_URL_LOCAL_PORT}"
  CLICKPIE_API_URL_LOCAL_HOSTNAME="${CLICKPIE_SERVER_URL_LOCAL_HOSTNAME}"
  CLICKPIE_API_URL_LOCAL="${CLICKPIE_API_URL_LOCAL_SCHEME}"://"${CLICKPIE_API_URL_LOCAL_HOSTNAME}":"${CLICKPIE_API_URL_LOCAL_PORT}"/api/"${API_VVERSION}"


  resolve_xdgdirs
  define_installdirs_$WITH_INSTALLDIRS_PRESET
  show_installdirs
  define_derivedirs
  define_env
  exit 0
  makefile
  configure_clickpie_server
  cleanup
}

resolve_system() {
  # System Analysis
  declare -gx BUILD_ARCH_SPECIFIER=$(basename $(systemd-path system-library-arch))
  echo "BUILD_ARCH_SPECIFIER...|$BUILD_ARCH_SPECIFIER"
  declare -gx HOST_ARCH_SPECIFIER=$BUILD_ARCH_SPECIFIER
  echo "HOST_ARCH_SPECIFIER...|$HOST_ARCH_SPECIFIER"
  declare -gx TARGET_ARCH_SPECIFIER=$HOST_ARCH_SPECIFIER
  echo "TARGET_ARCH_SPECIFIER...|$TARGET_ARCH_SPECIFIER"
}

resolve_pkgdirs() {
  }

resolve_xdgdirs() {
  printf "Resolving XDG dirs...\n"
  # XDG Base directories
  # https://specifications.freedesktop.org/basedir-spec/basedir-spec-0.8.html

  # user-specific data files prefix
  declare -gx XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
  echo "XDG_DATA_HOME...|$XDG_DATA_HOME"
  # user-specific configuration files prefix
  declare -gx XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
  echo "XDG_CONFIG_HOME...|$XDG_CONFIG_HOME"
  # user-specific state data files prefix
  declare -gx XDG_STATE_HOME="${XDG_STATE_HOME:-$HOME/.local/state}"
  echo "XDG_STATE_HOME...|$XDG_STATE_HOME"
  # user-specific cache data files prefix
  declare -gx XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
  echo "XDG_CACHE_HOME...|$XDG_CACHE_HOME"
  # user-specific runtime files prefix
  declare -gx XDG_RUNTIME_DIR="$XDG_RUNTIME_DIR"
  echo "XDG_RUNTIME_DIR...|$XDG_RUNTIME_DIR"
  # user-specific data files SEARCH path
  declare -gx XDG_DATA_DIRS="${XDG_DATA_DIRS:-/usr/local/share/:/usr/share/}"
  echo "XDG_DATA_DIRS...|$XDG_DATA_DIRS"
  # user-specific configuration files SEARCH path
  declare -gx XDG_CONFIG_DIRS="${XDG_CONFIG_DIRS:-/etc/xdg}"
  echo "XDG_CONFIG_DIRS...|$XDG_CONFIG_DIRS"

  # XDG User directories
  # https://www.freedesktop.org/wiki/Software/xdg-user-dirs/
  declare -gx XDG_DESKTOP_DIR="$(xdg-user-dir DESKTOP)"
  echo "XDG_DESKTOP_DIR...|$XDG_DESKTOP_DIR"
  declare -gx XDG_DOWNLOAD_DIR="$(xdg-user-dir DOWNLOAD)"
  echo "XDG_DOWNLOAD_DIR...|$XDG_DOWNLOAD_DIR"
  declare -gx XDG_PUBLICSHARE_DIR="$(xdg-user-dir PUBLICSHARE)"
  echo "XDG_PUBLICSHARE_DIR...|$XDG_PUBLICSHARE_DIR"
  declare -gx XDG_TEMPLATES_DIR="$(xdg-user-dir TEMPLATES)"
  echo "XDG_TEMPLATES_DIR...|$XDG_TEMPLATES_DIR"
  declare -gx XDG_DOCUMENTS_DIR="$(xdg-user-dir DOCUMENTS)"
  echo "XDG_DOCUMENTS_DIR...|$XDG_DOCUMENTS_DIR"
  declare -gx XDG_MUSIC_DIR="$(xdg-user-dir MUSIC)"
  echo "XDG_MUSIC_DIR...|$XDG_MUSIC_DIR"
  declare -gx XDG_PICTURES_DIR="$(xdg-user-dir PICTURES)"
  echo "XDG_PICTURES_DIR...|$XDG_PICTURES_DIR"
  declare -gx XDG_VIDEOS_DIR="$(xdg-user-dir VIDEOS)"
  echo "XDG_VIDEOS_DIR...|$XDG_VIDEOS_DIR"
}

define_installdirs_vendor() {
  PREFIX=/usr
  EXEC_PREFIX=$PREFIX
  BINDIR=${EXEC_PREFIX}/bin
  SBINDIR=${EXEC_PREFIX}/sbin
  LIBEXECDIR=${EXEC_PREFIX}/libexec
  DATAROOTDIR=${PREFIX}/share
  DATADIR=${DATAROOTDIR}
  SYSCONFDIR=/etc
  LOCALSTATEDIR=/var
  RUNSTATEDIR=/run
  INCLUDEDIR=${PREFIX}/include
  LIBDIR=${EXEC_PREFIX}/lib
}
define_installdirs_host() {
  PREFIX=/usr/local
  EXEC_PREFIX=$PREFIX
  BINDIR=${EXEC_PREFIX}/bin
  SBINDIR=${EXEC_PREFIX}/sbin
  LIBEXECDIR=${EXEC_PREFIX}/libexec
  DATAROOTDIR=${PREFIX}/share
  DATADIR=${DATAROOTDIR}
  SYSCONFDIR=/etc
  LOCALSTATEDIR=/var
  RUNSTATEDIR=/run
  INCLUDEDIR=${PREFIX}/include
  LIBDIR=${EXEC_PREFIX}/lib
}
define_installdirs_user() {
  PREFIX=${HOME}/.local
  EXEC_PREFIX=$PREFIX
  BINDIR=${EXEC_PREFX}/bin
  SBINDIR=${EXEC_PREFIX}/sbin
  LIBDIR=${EXEC_PREFIX}/lib
  LIBEXECDIR=${EXEC_PREFIX}/libexec
  INCLUDEDIR=${PREFIX}/include
  LOCALSTATEDIR=${PREFIX}/var
  RUNSTATEDIR=${PREFIX}/run
  SYSCONFDIR=${PREFIX}/etc
  DATAROOTDIR=${PREFIX}/share
  DATADIR=${DATAROOTDIR}
}
define_installdirs_opt() {
  PREFIX=/opt/$PKG_NAME
  EXEC_PREFIX=$PREFIX
  BINDIR=${EXEC_PREFIX}/bin
  SBINDIR=${EXEC_PREFIX}/sbin
  LIBDIR=${EXEC_PREFIX}/lib
  LIBEXECDIR=${EXEC_PREFIX}/libexec
  INCLUDEDIR=${PREFIX}/include
  LOCALSTATEDIR=/var/opt
  RUNSTATEDIR=/run
  SYSCONFDIR=/etc/opt
  DATAROOTDIR=${PREFIX}/share
  DATADIR=${DATAROOTDIR}
}
define_installdirs_srv() {
  PREFIX=/srv/${PKG_NAME}
  EXEC_PREFIX=${PREFIX}
  BINDIR=${EXEC_PREFIX}/bin
  SBINDIR=${EXEC_PREFIX}/sbin
  LIBDIR=${EXEC_PREFIX}/lib
  LIBEXECDIR=${EXEC_PREFIX}/libexec
  INCLUDEDIR=${PREFIX}/include
  LOCALSTATEDIR=/var
  RUNSTATEDIR=/run
  SYSCONFDIR=/srv/etc
  DATAROOTDIR=${PREFIX}/share
  DATADIR=${DATAROOTDIR}
}
define_installdirs_gnu_prefix() {
  PREFIX=/usr/local
  EXEC_PREFIX=$PREFIX
  BINDIR=${EXEC_PREFIX}/bin
  SBINDIR=${EXEC_PREFIX}/sbin
  LIBDIR=${EXEC_PREFIX}/lib
  LIBEXECDIR=${EXEC_PREFIX}/libexec
  INCLUDEDIR=${PREFIX}/include
  LOCALSTATEDIR=${PREFIX}/var
  RUNSTATEDIR=${LOCALSTATEDIR}/run
  SYSCONFDIR=${PREFIX}/etc
  DATAROOTDIR=${PREFIX}/share
  DATADIR=${DATAROOTDIR}
}

show_installdirs() {
  printf "Defining installation directories with preset...|$WITH_INSTALLDIRS_PRESET\n"
  echo "PREFIX...|$PREFIX"
  echo "EXEC_PREFIX...|$EXEC_PREFIX"
  echo "BINDIR...|$BINDIR"
  echo "SBINDIR...|$SBINDIR"
  echo "LIBDIR...|$LIBDIR"
  echo "LIBEXECDIR...|$LIBEXECDIR"
  echo "INCLUDEDIR...|$INCLUDEDIR"
  echo "LOCALSTATEDIR...|$LOCALSTATEDIR"
  echo "RUNSTATEDIR...|$RUNSTATEDIR"
  echo "SYSCONFDIR...|$SYSCONFDIR"
  echo "DATAROOTDIR...|$DATAROOTDIR"
  echo "DATADIR...|$DATADIR"
}

define_derivedirs() {
  # Persistent state and private data directories
  # Derived from $LOCALSTATEDIR
  printf "Defining derived dirs...\n"
  declare -gx LOCALSTATEDIR_PKG="${LOCALSTATEDIR}/lib/${PKG_NAME}"
  echo "LOCALSTATEDIR_PKG...|$LOCALSTATEDIR_PKG"
  declare -gx LOCALSTATEDIR_USR="${XDG_STATE_HOME}"
  echo "LOCALSTATEDIR_USR...|$LOCALSTATEDIR_USR"
  declare -gx LOCALSTATEDIR_USR_PKG="${LOCALSTATEDIR_USR}/${PKG_NAME}"
  echo "LOCALSTATEDIR_USR_PKG...|$LOCALSTATEDIR_USR_PKG"

  # Runtime data directories
  # Derived from $RUNSTATEDIR
  declare -gx RUNSTATEDIR_PKG="${RUNSTATEDIR}/${PKG_NAME}"
  echo "RUNSTATEDIR_PKG...|$RUNSTATEDIR_PKG"
  declare -gx RUNSTATEDIR_USR=
  echo "RUNSTATEDIR_USR...|$RUNSTATEDIR_USR"
  declare -gx RUNSTATEDIR_USR_PKG=
  echo "RUNSTATEDIR_USR_PKG...|$RUNSTATEDIR_USR_PKG"

  # Libraries and read-only data directories
  # Derived from LIBDIR=
  declare -gx LIBDIR_PKG="${LIBDIR}/${PKG_NAME}"
  echo "LIBDIR_PKG...|$LIBDIR_PKG"

  # Architecture-dependent libraries and read-only data directories
  declare -gx LIBDIR_ARCH="${LIBDIR}/${HOST_ARCH_SPECIFIER}"
  echo "LIBDIR_ARCH...|$LIBDIR_ARCH"
  declare -gx LIBDIR_ARCH_PKG="${LIBDIR_ARCH}/${PKG_NAME}"
  echo "LIBDIR_ARCH_PKG...|$LIBDIR_ARCH_PKG"

  # Header files directories
  # Derived from $INCLUDEDIR
  declare -gx INCLUDEDIR_PKG="${INCLUDEDIR}/${PKG_NAME}"
  echo "INCLUDEDIR_PKG...|$INCLUDEDIR_PKG"

  # Architecture-dependent header files directories
  # Derived from $INCLUDEDIR
  declare -gx INCLUDEDIR_ARCH="${INCLUDEDIR}/${HOST_ARCH_SPECIFIER}"
  echo "INCLUDEDIR_ARCH...|$INCLUDEDIR_ARCH"
  declare -gx INCLUDEDIR_ARCH_PKG="${INCLUDEDIR_ARCH}/${PKG_NAME}"
  echo "INCLUDEDIR_ARCH_PKG...|$INCLUDEDIR_ARCH_PKG"

  # Package-run executables directories
  # Derived from $LIBEXECDIR
  declare -gx LIBEXECDIR_PKG="${LIBEXECDIR}/${PKG_NAME}"
  echo "LIBEXECDIR_PKG...|$LIBEXECDIR_PKG"

  # Configurations
  # Derived from $SYSCONFDIR
  declare -gx SYSCONFDIR_PKG="${SYSCONFDIR}/${PKG_NAME}"
  echo "SYSCONFDIR_PKG...|$SYSCONFDIR_PKG"
  declare -gx SYSCONFDIR_USR="${XDG_CONFIG_HOME}"
  echo "SYSCONFDIR_USR...|$SYSCONFDIR_USR"
  declare -gx SYSCONFDIR_USR_PKG="${SYSCONFDIR_USR}/${PKG_NAME}"
  echo "SYSCONFDIR_USR_PKG...|$SYSCONFDIR_USR_PKG"

  # Application executables
  # BINDIR = Defined elsewhere
  declare -gx BINDIR_USR="${HOME}/.local/bin"
  echo "BINDIR_USR...|$BINDIR_USR"

  # System executables
  # SBINDIR = Defined elsewhere
  declare -gx SBINDIR_USR="${HOME}/.local/sbin"
  echo "SBINDIR_USR...|$SBINDIR_USR"

  # Logs
  # Derived from $LOCALSTATEDIR
  declare -gx LOGDIR="${LOCALSTATEDIR}/log"
  echo "LOGDIR...|$LOGDIR"
  declare -gx LOGDIR_PKG="${LOGDIR}/${PKG_NAME}"
  echo "LOGDIR_PKG...|$LOGDIR_PKG"

  # Persistent system cache data
  # Derived from $LOCALSTATEDIR
  declare -gx CACHEDIR="${LOCALSTATEDIR}/cache"
  echo "CACHEDIR...|$CACHEDIR"
  declare -xg CACHEDIR_PKG="${CACHEDIR}/${PKG_NAME}"
  echo "CACHEDIR_PKG...|$CACHEDIR_PKG"
  declare -gx CACHEDIR_USR="${XDG_CACHE_HOME}"
  echo "CACHEDIR_USR...|$CACHEDIR_USR"
  declare -gx CACHEDIR_USR_PKG="${CACHEDIR_USR}/${PKG_NAME}"
  echo "CACHEDIR_USR_PKG...|$CACHEDIR_USR_PKG"

  # Persistent system spool data
  # Derived from $LOCALSTATEDIR
  declare -gx SPOOLDIR="${LOCALSTATEDIR}/spool"
  echo "SPOOLDIR...|$SPOOLDIR"
  declare -gx SPOOLDIR_PKG="${SPOOLDIR}/${PKG_NAME}"
  echo "SPOOLDIR_PKG...|$SPOOLDIR_PKG"

  # Lock directories
  # Derived from $RUNSTATEDIR
  declare -gx LOCKDIR="${RUNSTATEDIR}/lock"
  echo "LOCKDIR...|$LOCKDIR"
  declare -gx LOCKDIR_PKG="${LOCKDIR}/${PKG_NAME}"
  echo "LOCKDIR_PKG...|$LOCKDIR_PKG"

  # Temporary files
  declare -gx TMPDIR_ENV=$TMPDIR
  echo "TMPDIR_ENV...|$TMPDIR_ENV"
  declare -gx TMPDIR_PERSISTENT=/var/tmp
  echo "TMPDIR_PERSISTENT...|$TMPDIR_PERSISTENT"
  declare -gx TMPDIR_FALLBACK=/tmp
  echo "TMPDIR_FALLBACK...|$TMPDIR_FALLBACK"
  declare -gx TMPDIR=$TMPDIR_ENV
  TMPDIR=${TMPDIR:-$TMPDIR_FALLBACK}
  echo "TMPDIR...|$TMPDIR"
}

define_installdirs() {
  printf "Resolving installation directories...\n"

  # De facto
  PREFIX=
  # Gnu standard
  PREFIX=/usr/local
  # Systemd
  PREFIX=
  # Development
  isempty PREFIX && PREFIX="$(pwd)"
  echo "PREFIX...|$(realpath -m --relative-to=. $PREFIX)"

  # Gnu standard
  EXEC_PREFIX="$PREFIX"
  # De facto
  EXEC_PREFIX=
  # Development
  isempty EXEC_PREFIX && EXEC_PREFIX="$PREFIX"
  echo "EXEC_PREFIX...|$(realpath -m --relative-to=. $EXEC_PREFIX)"

  # Gnu standard
  BINDIR="${EXEC_PREFIX}/bin"
  # De facto
  BINDIR=/usr/bin
  # Development
  isempty BINDIR && BINDIR="${EXEC_PREFIX}/bin"
  echo "BINDIR...|$(realpath -m --relative-to=. $BINDIR)"

  # Gnu standard
  SBINDIR="${EXEC_PREFIX}/sbin"
  # De facto
  SBINDIR=/usr/sbin
  # Development
  isempty SBINDIR && SBINDIR="${EXEC_PREFIX}/sbin"
  echo "SBINDIR...|$(realpath -m --relative-to=. $SBINDIR)"

  # Defacto
  LIBEXECDIR=/usr/libexec/$PKG_NAME
  # Gnu standard
  LIBEXECDIR="${EXEC_PREFIX}/libexec"
  # $(libexecdir)/package-name/machine/version.
  # Systemd
  LIBEXECDIR=/usr/lib/$PKG_NAME
  # Development
  isempty LIBEXECDIR && LIBEXECDIR="${EXEC_PREFIX}/libexec"
  echo "LIBEXECDIR...|$(realpath -m --relative-to=. $LIBEXECDIR)"

  # De facto
  DATAROOTDIR=/usr/share
  # Gnu standard
  DATAROOTDIR="${PREFIX}/share"
  # Systemd
  DATAROOTDIR=/usr/share
  # Development
  isempty DATAROOTDIR && DATAROOTDIR="${PREFIX}/share"
  echo "DATAROOTDIR...|$(realpath -m --relative-to=. $DATAROOTDIR)"

  # De facto
  DATADIR=/usr/share/$PKG_NAME
  # Gnu standard
  DATADIR="${DATAROOTDIR}/${PKG_NAME}"
  # Systemd
  DATADIR="${DATAROOTDIR}/${PKG_NAME}"

  isempty DATADIR && DATADIR="${DATAROOTDIR}/${PKG_NAME}"
  echo "DATADIR...|$(realpath -m --relative-to=. $DATADIR)"
  isempty SYSCONFDIR && SYSCONFDIR="${PREFIX}/etc"
  echo "SYSCONFDIR...|$(realpath -m --relative-to=. $SYSCONFDIR)"
  isempty SHAREDSTATEDIR && SHAREDSTATEDIR="${PREFIX}/com"
  echo "SHAREDSTATEDIR...|$(realpath -m --relative-to=. $SHAREDSTATEDIR)"

  # GNU standard
  isempty LOCALSTATEDIR && LOCALSTATEDIR="${PREFIX}/var"
  # De facto
  LOCALSTATEDIR=/var/lib/${PKG_NAME}
  echo "LOCALSTATEDIR...|$(realpath -m --relative-to=. $LOCALSTATEDIR)"

  # GNU standard
  isempty RUNSTATEDIR && RUNSTATEDIR="${LOCALSTATEDIR}/run"
  # De facto
  RUNSTATEDIR=/run
  echo "RUNSTATEDIR...|$(realpath -m --relative-to=. $RUNSTATEDIR)"

  SYSTEM_TMPDIR_=
  ENV_TMPDIR=
  VAR_TMPDIR=

  isempty INCLUDEDIR && INCLUDEDIR="${PREFIX}/include"
  echo "INCLUDEDIR...|$(realpath -m --relative-to=. $INCLUDEDIR)"
  isempty DOCDIR && DOCDIR="${DATAROOTDIR}/doc/${PKG_NAME}"
  echo "DOCDIR...|$(realpath -m --relative-to=. $DOCDIR)"
  isempty LIBDIR && LIBDIR="${LIBEXECDIR}/lib"
  echo "LIBDIR...|$(realpath -m --relative-to=. $LIBDIR)"
}

expand() {
  echo ${!1}
}

makefile() {
  printf "Generating Makefile...|%s\n" "$out_makefile"
  m4 $out_macrosfile $in_makefile > $out_makefile
}

flag() {
  local f="${!1:-}"
  if [ "$f" == '' ]; then
    error "Undefined flag: $1"
  elif [ "$f" == true ]; then
    return 0
  else
    return 1
  fi
}

isempty() {
  local v="${!1:-}"
  if [ "$v" == "" ]; then
    return 0
  else
    return 1
  fi
}

configure_clickpie_server() {
  printf "Configuring clickpie-server...\n"
  cd clickpie-server || exit 1
  PKGDIR=.
  PKGDIR_ABS=$(pwd)
  SRCDIR=${PKGDIR}/src
  SRCDIR_ABS=${PKGDIR_ABS}/src
  BUILDIR=${PKGDIR}/build
  BUILDIR_ABS=${PKGDIR_ABS}/build
  CACHEDIR=${PREFIX}/var
  TEMPDIR=${PREFIX}/var
  CONFDIR=${PREFIX}/config
  define_env
  makefile
}

cleanup() {
  rm $pre_config_env
  rm $post_config_env
}

useparseurl() {
  read -r scheme hostname port < <(parseUrl "http://localhost:5173")
  echo $scheme $hostname $port
}

parseUrl() {
  url=$1
  scheme="$(echo "$url" | grep -Eo "^.*://" -)"
  scheme="${scheme%%:*}"
  hostname="$(echo "$url" | grep -Eo "(://[a-zA-Z0-9._-]+(:[0-9]+|/|$)|@[a-zA-Z0-9._-]+(:|/|$))")"
  hostname="${hostname##*/}"
  hostname="${hostname#*@}"
  hostname="${hostname%:*}"
  port="$(echo "$url" | grep -Eo ":[0-9]+(/|$)")"
  port="${port#*:}"
  echo "$scheme" "$hostname" "$port"
}

define_env() {
  printf "Defining environment...|%s\n" "$out_envfile"
  printenv > $post_config_env
  rm -f $out_envfile
  local unquoted_envars=$(mktemp)
  diff --normal $pre_config_env $post_config_env | grep '^>' | cut -c3- | sort > $unquoted_envars
  while IFS='=' read -r k v; do
    # Quote values
    if [[ "$v" =~ \' ]]; then
      printf "%s=\"%s\"\n" "$k" "$v" >> $out_envfile
    else
      printf "%s='%s'\n" "$k" "$v" >> $out_envfile
    fi
  done < $unquoted_envars

  rm -f $out_macrosfile
  while IFS='=' read -r key value; do
    cat <<EOF >> $out_macrosfile
define(\`IN_$key', \`$value')dnl
EOF
  done < $unquoted_envars
}

parse_args(){
  declare -ga POSARGS=()
  while (($# > 0)); do
    case "${1:-}" in
      -r* | -r=* | --run=* | --run*)
        command=$(parse_param "$@") || shift $?
        $command "${@:2}"
        exit 0
        ;;
      --mode=* | --mode* | -m)
        MODE="$(parse_param "$@")" || shift $?
        ;;
      --with-installdirs-preset=* | --with-installdirs-preset*)
        WITH_INSTALLDIRS_PRESET="$(parse_param "$@")" || shift $?
        ;;
      --prefix=* | --prefix*)
        PREFIX="$(parse_param "$@")" || shift $?
        ;;
      --buildir-stem=* | --buildir-stem)
        BUILDIR_STEM="$(parse_param "$@")" || shift $?
        ;;
      --skip-npm-install)
        SKIP_NPM_INSTALL=true
        ;;
      --server-public-url=* | --server-public-url*)
        CLICKPIE_SERVER_URL_PUBLIC="$(parse_param "$@")" || shift $?
        ;;
      --server-local-url=* | --server-local-url*)
        CLICKPIE_SERVER_URL_LOCAL="$(parse_param "$@")" || shift $?
        ;;
      --with-clickup-target=* | --with-clickup-target*)
        WITH_CLICKUP_TARGET="$(parse_param "$@")" || shift $?
        ;;
      --with-deploy-target=* | --with-deploy-target*)
        WITH_DEPLOY_TARGET="$(parse_param "$@")" || shift $?
        ;;
      --with-gcloud-target=* | --with-gcloud-target*)
        WITH_GCLOUD_TARGET="$(parse_param "$@")" || shift $?
        ;;
      --loglevel=* | --loglevel*)
        LOGLEVEL="$(parse_param "$@")" || shift $?
        ;;
      -C | --config=* | --config*)
        CONFIG="$(parse_param "$@")" || shift $?
        ;;
      -d | --debug)
        DEBUG=0
        ;;
      -h | --help)
        usage
        exit 0
        ;;
      -[a-zA-Z][a-zA-Z]*)
        local i="${1:-}"
        shift
        local rest="$@"
        set --
        for i in $(echo "$i" | grep -o '[a-zA-Z]'); do
          set -- "$@" "-$i"
        done
        set -- $@ $rest
        continue
        ;;
      --)
        shift
        POSARGS+=("$@")
        ;;
      -[a-zA-Z]* | --[a-zA-Z]*)
        error "Unrecognized argument ${1:-}"
        ;;
      *)
        POSARGS+=("${1:-}")
        ;;
    esac
    shift
  done
}

parse_param() {
  local param arg
  local -i toshift=0

  if (($# == 0)); then
    return $toshift
    # param = value
  elif [[ "$1" =~ .*=.* ]]; then
    param="${1%%=*}"
    arg="${1#*=}"
    # param value
  elif [[ "${2-}" =~ ^[^-].+ ]]; then
    param="$1"
    arg="$2"
    ((toshift++))
  fi

  if [[ -z "${arg-}" && ! "${OPTIONAL-}" ]]; then
    fatal "${param:-$1} requires an argument"
  fi

  echo "${arg:-}"
  return $toshift
}

quote() {
  echo \'"$@"\'
}

error() {
  echo "$@"
  exit 1
}

debug() {
  [ ! $DEBUG ] && return
  echo debug: "$@" >&2
}

debug_script_params() {
  debug "Output format: $(quote $_OUTPUT_FORMAT)"
  debug "Verbosity: $(quote $_VERBOSE)"
  debug "Clickup Authorization token: $(quote $_USER_AUTH_TOKEN)"
  debug "Clickup API prefix: $(quote $_CLICKUP_API_PREFIX)"
  debug "Script json2csv: $(quote $_JSON2CSV)"
  debug "Script commons: $(quote $_SCRIPT_COMMONS)"
  debug "Workspace: $(quote $_WORKSPACE_ID)"
  debug "Space: $(quote $_SPACE_ID)"
  debug "Folder: $(quote $_FOLDER_ID)"
  debug "List: $(quote $_LIST_ID)"
}
debug_xdg_dirs() {
  echo XDG_DATA_HOME "${XDG_DATA_HOME}"
  echo XDG_CONFIG_HOME "${XDG_CONFIG_HOME}"
  echo XDG_STATE_HOME "${XDG_STATE_HOME}"
  echo XDG_CACHE_HOME "${XDG_CACHE_HOME}"
  echo XDG_RUNTIME_DIR "${XDG_RUNTIME_DIR}"
  echo XDG_DATA_DIRS "${XDG_DATA_DIRS}"
  echo XDG_CONFIG_DIRS "${XDG_CONFIG_DIRS}"
  echo XDG_DESKTOP_DIR $XDG_DESKTOP_DIR
  echo XDG_DOWNLOAD_DIR $XDG_DOWNLOAD_DIR
  echo XDG_PUBLICSHARE_DIR $XDG_PUBLICSHARE_DIR
  echo XDG_TEMPLATES_DIR $XDG_TEMPLATES_DIR
  echo XDG_DOCUMENTS_DIR $XDG_DOCUMENTS_DIR
  echo XDG_MUSIC_DIR $XDG_MUSIC_DIR
  echo XDG_PICTURES_DIR $XDG_PICTURES_DIR
  echo XDG_VIDEOS_DIR $XDG_VIDEOS_DIR
}

debug_dirs() {
  echo Persistent state and private data directories
  echo LOCALSTATEDIR $LOCALSTATEDIR
  echo LOCALSTATEDIR_PKG $LOCALSTATEDIR_PKG
  echo LOCALSTATEDIR_USR $LOCALSTATEDIR_USR
  echo LOCALSTATEDIR_USR_PKG $LOCALSTATEDIR_USR_PKG
  echo
  echo Runtime data directories
  echo RUNSTATEDIR $RUNSTATEDIR
  echo RUNSTATEDIR_PKG $RUNSTATEDIR_PKG
  echo RUNSTATEDIR_USR $RUNSTATEDIR_USR
  echo RUNSTATEDIR_USR_PKG $RUNSTATEDIR_USR_PKG
  echo
  echo Libraries and read-only data directories
  echo LIBDIR $LIBDIR
  echo LIBDIR_PKG $LIBDIR_PKG
  echo
  echo Architecture-dependent libraries and read-only data directories
  echo LIBDIR_ARCH $LIBDIR_ARCH
  echo LIBDIR_ARCH_PKG $LIBDIR_ARCH_PKG
  echo
  echo Header files directories
  echo INCLUDEDIR $INCLUDEDIR
  echo INCLUDEDIR_PKG $INCLUDEDIR_PKG
  echo
  echo Architecture-dependent header files directories
  echo   INCLUDEDIR_ARCH $INCLUDEDIR_ARCH
  echo   INCLUDEDIR_ARCH_PKG $INCLUDEDIR_ARCH_PKG
  echo
  echo Package-run executables directories
  echo   LIBEXECDIR $LIBEXECDIR
  echo   LIBEXECDIR_PKG $LIBEXECDIR_PKG
  echo
  echo Configurations
  echo   SYSCONFDIR $SYSCONFDIR
  echo   SYSCONFDIR_PKG $SYSCONFDIR_PKG
  echo   SYSCONFDIR_USR $SYSCONFDIR_USR
  echo   SYSCONFDIR_USR_PKG $SYSCONFDIR_USR_PKG
  echo
  echo Application executables
  echo   BINDIR $BINDIR
  echo   BINDIR_USR $BINDIR_USR
  echo
  echo System executables
  echo   SBINDIR $SBINDIR
  echo   SBINDIR_USR $SBINDIR_USR
  echo
  echo Logs
  echo   LOGDIR $LOGDIR
  echo   LOGDIR_PKG $LOGDIR_PKG
  echo
  echo Persistent system cache data
  echo   CACHEDIR $CACHEDIR
  echo   CACHEDIR_PKG $CACHEDIR_PKG
  echo   CACHEDIR_USR $CACHEDIR_USR
  echo   CACHEDIR_USR_PKG $CACHEDIR_USR_PKG
  echo
  echo Persistent system spool data
  echo   SPOOLDIR $SPOOLDIR
  echo   SPOOLDIR_PKG $SPOOLDIR_PKG
  echo
  echo Lock directories
  echo   LOCKDIR $LOCKDIR
  echo   LOCKDIR_PKG $LOCKDIR_PKG
  echo
  echo Temporary files
  echo   TMPDIR_ENV $TMPDIR_ENV
  echo   TMPDIR_PERSISTENT $TMPDIR_PERSISTENT
  echo   TMPDIR_FALLBACK $TMPDIR_FALLBACK
  echo   TMPDIR $TMPDIR
}

main "$@"

## Local Variables:
## mode: script-mode
## End:
