#!/usr/bin/make

# Make config
SHELL:=/usr/bin/bash
.DEFAULT_GOAL:=all
.DELETE_ON_ERROR:
.EXPORT_ALL_VARIABLES:
.SECONDEXPANSION:
.ONESHELL:

# App description
app_name:=clickpie-server
app_version:=0.0.1
app_vversion:=v$(app_version)
app_distname:=$(app_name)-$(app_vversion)

# App directories
PREFIX=IN_PREFIX
PKGDIR=IN_PKGDIR
PKGDIR_ABS=IN_PKGDIR_ABS
SRCDIR=IN_SRCDIR
SRCDIR_ABS=IN_SRCDIR_ABS
BUILDIR=IN_BUILDIR
BUILDIR_ABS=IN_BUILDIR_ABS
CACHEDIR=IN_CACHEDIR
TEMPDIR=IN_TEMPDIR
CONFDIR=IN_CONFDIR

# Standard commands
# ------------------------------
install=/usr/bin/install
mkdirp:=/usr/bin/mkdir -p
sort:=/usr/bin/sort
cp:=/usr/bin/cp
rm:=/usr/bin/rm
chmod:=/usr/bin/chmod
m4:=/usr/bin/m4
bash:=/usr/bin/bash

# Tools and their configurations
# ------------------------------

node:=IN_NODE
dotenv:=IN_DOTENV
esbuild:=IN_ESBUILD
dotenvdirs:=$(CONFDIR)/env/* $(PKGDIR)/.env.*
dotenvfile:=.env
loadenv:=set -a; source $(dotenvfile)
json2csv:=$(CONFDIR)/scripts/json2csv.jq


all: build

# Scratch
scratch:
	$(loadenv)
	$(node) tmp/scratch.js

# Build
build:

# Serve
serve: dotenv
	$(loadenv)
ifdef daemon
	$(node) $(SRCDIR)/serve.js &
else
	$(node) $(SRCDIR)/serve.js
endif

run: file=
run: dotenv $(file)
	@if [[ "$${file:-}" == "" ]]; then
	echo "Usage: 'make run file [args]'"
	exit 1
	fi
	extension="$${file##*.}"
	$(loadenv)
	case $$extension in
	sh)
	$(SHELL) $(file) $(args)
	;;
	js)
	$(node) $(file) $(args)
	;;
	*)
	echo "Unrecognized extension: $$extension"
	echo "Failed to 'make $@ $^'"
	;;
	esac

.DEFAULT:
	@if [ ! -f "$<" ]; then
	echo "Missing file $${file:-}"
	exit 1
	fi

dotenv:
	$(dotenv) $(dotenvflags) $(dotenvdirs) | sort > $(dotenvfile)

clean:
	-rm -rf build
	-rm -rf dist
	-rm -f *.log
	-rm -f $(dotenvfile)

distclean: clean
	-rm -rf node_modules
	-rm -f package-lock.json
	-rm -f macros.m4
	-rm -f .env*

help:
	@cat ./Makefile | grep -i --color=auto 'phony' | cut -d ' ' -f2- | tail --lines=+3

.PHONY: help
# General setup of the repository
.PHONY: all # build application
# Software development
.PHONY: serve # serve service
.PHONY: run # read dotenvfile and run any file
.PHONY: scratch # read dotenvfile and run the scratch file
.PHONY: dotenv # write environment into .env
.PHONY: build # build application
# Cleaning
.PHONY: clean # Remove files created by make build, install, package, dist...
.PHONY: distclean # Remove files created by configure
# Miscellaenous
